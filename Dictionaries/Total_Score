#Challenge Condition

TOTAL SCORE
A website that tracks basketball scores and stats is having trouble with its data. The first-half score and second-half score are stored in separate dictionaries, making it difficult for them to parse the overall score. They have asked you to help them write a program that merges the two dictionaries and another function that calculates the total score.

CHALLENGE
Complete the merge and total_score functions.

The merge function accepts two score dictionaries as input and returns a single merged dictionary that contains all of the keys and values from the input dictionaries.

The total_score function should take a single score dictionary as input and return the total score calculated from the values of that dictionary. Take a look at the test suite near the top of the file for the names of keys to expect. If no points were scored, the function should return 0.

Don't forget: you can always add print() statements to your code so that you can debug your code before submitting! Print out values of variables to see what's going on, and question your assumptions about what you think is happening.

EXAMPLE OF DEBUGGING WITH PRINT STATEMENTS
def total_score(score_dict):
    print(f"score_dict: {score_dict}")
    for key in score_dict:
        print(f"key: {key}")

You would then run your code and manually inspect the output to see what's going on. You can always remove the print statements when you're done debugging if you want.

##########################################################################################################################
#My Code

def merge(dict1, dict2):
    # Step 1: Create a new dictionary to store the merged values
    merged_dict = {}

    # Step 2: Update the merged_dict with values from dict1 and dict2
    merged_dict.update(dict1)
    merged_dict.update(dict2)

    # Step 3: Return the merged dictionary
    return merged_dict

def total_score(score_dict):
    # Step 1: Initialize a variable to store the total score
    total = 0

    # Step 2: Iterate over the values in the score_dict and add them to the total
    for value in score_dict.values():
        total += value

    # Step 3: Return the total score
    return total

##########################################################################################################################
#Optional Code

def merge(dict1, dict2):
    merged_dict = {}
    for k in dict1:
        merged_dict[k] = dict1[k]
    for k in dict2:
        merged_dict[k] = dict2[k]
    return merged_dict


def total_score(score_dict):
    total = 0
    for k in score_dict:
        total += score_dict[k]
    return total